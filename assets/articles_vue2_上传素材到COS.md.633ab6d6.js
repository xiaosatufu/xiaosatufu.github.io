import{_ as a,v as s,b as l,R as n}from"./chunks/framework.f154aae1.js";const A=JSON.parse('{"title":"javascript","description":"","frontmatter":{},"headers":[],"relativePath":"articles/vue2/上传素材到COS.md","filePath":"articles/vue2/上传素材到COS.md"}'),o={name:"articles/vue2/上传素材到COS.md"},e=n(`<h1 id="javascript" tabindex="-1">javascript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;javascript&quot;">​</a></h1><h2 id="类型和语法" tabindex="-1">类型和语法 <a class="header-anchor" href="#类型和语法" aria-label="Permalink to &quot;类型和语法&quot;">​</a></h2><h3 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h3><p>JavaScript 现在有八种数据类型，包括 7 个基础类型和 1 个引用类型。</p><p>基础类型：</p><ol><li>空值（null）</li><li>未定义（undefined）</li><li>布尔值（ boolean）</li><li>数字（number）</li><li>字符串（string）</li><li>符号（symbol，ES6 新增）</li><li>对象（bigint，ES11 新增）</li></ol><p>引用类型：</p><ol><li>对象(object)</li></ol><h3 id="类型判断" tabindex="-1">类型判断 <a class="header-anchor" href="#类型判断" aria-label="Permalink to &quot;类型判断&quot;">​</a></h3><p>一般我们可以用 typeof 运算符来查看值的类型，它返回的是类型的字符串值，值包括上述的八种，除了 null。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">typeof null === &quot;object&quot;; // true</span></span></code></pre></div><p>这是历史遗留问题，因为第一版的 JavaScript 是用 32 位比特来存储值的，且是通过值的第 1 位或 3 位来识别类型的。而 null 表示为全 0，所以被错误地判断为 object。</p><ol><li>1：整型（int）</li><li>000：引用类型（object）</li><li>010：双精度浮点型（double）</li><li>100：字符串（string）</li><li>110：布尔型（boolean）</li></ol><p><code>JavaScript中的变量是没有类型的，只有值才有。--《你不知道的JavaScript（中卷）》</code></p><p>js 还有很多内置对象，内置对象是对象的子类型，有 Function,Arguments,Math,Date,RegExp,Error。typeof 输出都是 object，除了 Function。 function 虽然本质也是对象，但是与普通对象相比，内部有一个[Call]方法，表示这个对象是可以调用的，typeof 操作符在判断 object 的时候，如果内部有[[Call]]方法就会返回 Function，这是一个特殊处理。</p><p>判断对象的子类型可以使用 instanceof，内部机制是通过判断对象的原型链中是不是能找到类型的 prototype。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">function Car(make, model, year) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  this.make = make;</span></span>
<span class="line"><span style="color:#A6ACCD;">  this.model = model;</span></span>
<span class="line"><span style="color:#A6ACCD;">  this.year = year;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">const auto = new Car(&#39;Honda&#39;, &#39;Accord&#39;, 1998);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(auto instanceof Car);</span></span>
<span class="line"><span style="color:#A6ACCD;">// expected output: true</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(auto instanceof Object);</span></span>
<span class="line"><span style="color:#A6ACCD;">// expected output: true</span></span></code></pre></div><p>typeof 只能判断基本数据类型，instanceof 可以判断对象的子类型，要更精确的判断数据类型，可以使用 Object.prototype.toString.call 方法，这方法会返回 &quot;[object XXX]&quot; 的字符串。</p><p>call 调用，是因为很多对象的 toString 方法被重写了。</p><p>总结类型判断：</p><ol><li>利用 typeof 判断 <ul><li>typeof 可以判断除 null 以外的基础类型，引用类型除了 Function，其他都返回 &#39;object&#39;</li></ul></li><li>利用 instanceof 判断引用类型 <ul><li>类似于 [] instanceof Array</li></ul></li><li>利用 toString 判断引用类型 <ul><li>类似于 Object.prototype.toString.call({}) === &#39;[object Object]&#39;</li></ul></li></ol><h2 id="作用域和闭包" tabindex="-1">作用域和闭包 <a class="header-anchor" href="#作用域和闭包" aria-label="Permalink to &quot;作用域和闭包&quot;">​</a></h2><p>作用域是根据名称查找变量的一套规则，作用域分为<code>全局作用域</code>和<code>局部作用域</code>、ES6 的<code>块级作用域</code></p><p>全局作用域：任何地方都能访问到的就是全局作用域</p><ol><li>函数最外部定义的变量拥有全局作用域</li><li>未定义直接赋值的变量会自动声明为拥有全局作用域</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">a</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(b) </span><span style="color:#676E95;font-style:italic;">//1</span></span></code></pre></div><ol start="3"><li>浏览器下 window 的属性拥有全局作用域</li></ol><p>局部作用域：在固定的代码片段内可访问到，一般是指函数里声明的，所以局部作用域也叫函数作用域。</p><p>局部变量只作用于函数内，在函数开始执行时创建，函数执行完后局部变量会自动销毁。</p><p>块级作用域：只在变量声明的代码块内有效（let、const）</p><p>作用域链：执行函数时先从函数内部寻找局部变量， 没找到就往上个作用域寻找，直到全局作用域为止，这个作用域之间行程的引用关系就是作用域链</p><p>闭包：在一个函数内返回一个新的函数，新的函数引用了外部函数的变量，这时候这个变量会存在堆里，在这个函数执行完后不会被销毁。这就形成了闭包。 闭包的目的是将变量放在局部作用域，保留这个引用，实现变量的隐藏。</p><p>下面是简单的例子，foo 执行返回的函数保留了 foo 的局部变量，形成闭包</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">function foo() {</span></span>
<span class="line"><span style="color:#A6ACCD;">   var a = 1</span></span>
<span class="line"><span style="color:#A6ACCD;">   return function() {</span></span>
<span class="line"><span style="color:#A6ACCD;">      a++</span></span>
<span class="line"><span style="color:#A6ACCD;">      console.log(a)</span></span>
<span class="line"><span style="color:#A6ACCD;">   }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">var boo = foo()</span></span></code></pre></div><p>闭包缺点和解决方法：带有闭包的函数只要存在就会一直保留隐藏的局部变量，根据<code>垃圾回收</code>的机制，被一个作用域引用的变量不会被回收，所以这个隐藏的局部变量将会一直存在，就造成了内存泄漏。解决方法就是销毁这个作用域，手动将这个函数对闭包变量的引用进行释放。接上面代码的例子：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">boo = null</span></span></code></pre></div><h2 id="原型链" tabindex="-1">原型链 <a class="header-anchor" href="#原型链" aria-label="Permalink to &quot;原型链&quot;">​</a></h2><p>每个函数都有 prototype 属性，这个属性就是原型，也是一个对象。创建的时候只有 constructor 一个属性，该属性指向构造函数本身。</p><p>每个对象都有<code>__proto__</code>属性，指向了创建该对象的构造函数的原型，也就是函数的 prototype。这个属性指向了 [[prototype]]，但是 [[prototype]] 是内部属性，我们并不能访问到，所以使用 <code>__proto__</code> 来访问。</p><p>为了实现继承的方式，通过 <code>__proto__</code> 将对象和原型联系起来组成原型链，得以让对象可以访问到不属于自己的属性。</p>`,40),p=[e];function t(c,i,r,d,C,u){return s(),l("div",null,p)}const h=a(o,[["render",t]]);export{A as __pageData,h as default};
